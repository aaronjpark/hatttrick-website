{"ast":null,"code":"// Function to create elements with attributes\nfunction createElementWithAttributes(tag, attributes) {\n  const element = document.createElement(tag);\n  for (const key in attributes) {\n    element.setAttribute(key, attributes[key]);\n  }\n  return element;\n}\n\n// Function to fetch data and populate the table\nfunction fetchAndPopulateTable() {\n  fetch('leagues.json').then(response => response.json()).then(data => {\n    const standings = data['Premier League'].standings;\n    const tableBody = document.getElementById('tableBody');\n    for (const team in standings) {\n      const row = createElementWithAttributes('tr', {});\n\n      // Create and append cells\n      const positionCell = createElementWithAttributes('td', {});\n      positionCell.textContent = standings[team].position;\n      row.appendChild(positionCell);\n      const teamCell = createElementWithAttributes('td', {});\n      teamCell.textContent = team.replace(/-/g, ' ');\n      row.appendChild(teamCell);\n      const crestCell = createElementWithAttributes('td', {});\n      const img = createElementWithAttributes('img', {\n        src: standings[team].team_crest,\n        alt: team\n      });\n      img.style.width = '50px';\n      img.style.height = 'auto';\n      crestCell.appendChild(img);\n      row.appendChild(crestCell);\n      const pointsCell = createElementWithAttributes('td', {});\n      pointsCell.textContent = standings[team].points;\n      row.appendChild(pointsCell);\n      const gamesWonCell = createElementWithAttributes('td', {});\n      gamesWonCell.textContent = standings[team].games_won;\n      row.appendChild(gamesWonCell);\n      const gamesLostCell = createElementWithAttributes('td', {});\n      gamesLostCell.textContent = standings[team].games_lost;\n      row.appendChild(gamesLostCell);\n      const goalsForCell = createElementWithAttributes('td', {});\n      goalsForCell.textContent = standings[team].goals_for;\n      row.appendChild(goalsForCell);\n      const goalsAgainstCell = createElementWithAttributes('td', {});\n      goalsAgainstCell.textContent = standings[team].goals_against;\n      row.appendChild(goalsAgainstCell);\n      const goalDifferenceCell = createElementWithAttributes('td', {});\n      goalDifferenceCell.textContent = standings[team].goal_difference;\n      row.appendChild(goalDifferenceCell);\n\n      // Append row to table body\n      tableBody.appendChild(row);\n    }\n  }).catch(error => console.error('Error fetching data:', error));\n}\n\n// Call fetchAndPopulateTable function when DOM content is loaded\ndocument.addEventListener('DOMContentLoaded', fetchAndPopulateTable);","map":{"version":3,"names":["createElementWithAttributes","tag","attributes","element","document","createElement","key","setAttribute","fetchAndPopulateTable","fetch","then","response","json","data","standings","tableBody","getElementById","team","row","positionCell","textContent","position","appendChild","teamCell","replace","crestCell","img","src","team_crest","alt","style","width","height","pointsCell","points","gamesWonCell","games_won","gamesLostCell","games_lost","goalsForCell","goals_for","goalsAgainstCell","goals_against","goalDifferenceCell","goal_difference","catch","error","console","addEventListener"],"sources":["/Users/ang3l/Documents/Software Engineering/cs373-idb/src/pages/league.js"],"sourcesContent":["// Function to create elements with attributes\nfunction createElementWithAttributes(tag, attributes) {\n    const element = document.createElement(tag);\n    for (const key in attributes) {\n        element.setAttribute(key, attributes[key]);\n    }\n    return element;\n}\n\n// Function to fetch data and populate the table\nfunction fetchAndPopulateTable() {\n    fetch('leagues.json')\n        .then(response => response.json())\n        .then(data => {\n            const standings = data['Premier League'].standings;\n            const tableBody = document.getElementById('tableBody');\n\n            for (const team in standings) {\n                const row = createElementWithAttributes('tr', {});\n\n                // Create and append cells\n                const positionCell = createElementWithAttributes('td', {});\n                positionCell.textContent = standings[team].position;\n                row.appendChild(positionCell);\n\n                const teamCell = createElementWithAttributes('td', {});\n                teamCell.textContent = team.replace(/-/g, ' ');\n                row.appendChild(teamCell);\n\n                const crestCell = createElementWithAttributes('td', {});\n                const img = createElementWithAttributes('img', { \n                    src: standings[team].team_crest,\n                    alt: team\n                });\n                img.style.width = '50px';\n                img.style.height = 'auto';\n                crestCell.appendChild(img);\n                row.appendChild(crestCell);\n\n                const pointsCell = createElementWithAttributes('td', {});\n                pointsCell.textContent = standings[team].points;\n                row.appendChild(pointsCell);\n\n                const gamesWonCell = createElementWithAttributes('td', {});\n                gamesWonCell.textContent = standings[team].games_won;\n                row.appendChild(gamesWonCell);\n\n                const gamesLostCell = createElementWithAttributes('td', {});\n                gamesLostCell.textContent = standings[team].games_lost;\n                row.appendChild(gamesLostCell);\n\n                const goalsForCell = createElementWithAttributes('td', {});\n                goalsForCell.textContent = standings[team].goals_for;\n                row.appendChild(goalsForCell);\n\n                const goalsAgainstCell = createElementWithAttributes('td', {});\n                goalsAgainstCell.textContent = standings[team].goals_against;\n                row.appendChild(goalsAgainstCell);\n\n                const goalDifferenceCell = createElementWithAttributes('td', {});\n                goalDifferenceCell.textContent = standings[team].goal_difference;\n                row.appendChild(goalDifferenceCell);\n\n                // Append row to table body\n                tableBody.appendChild(row);\n            }\n        })\n        .catch(error => console.error('Error fetching data:', error));\n}\n\n// Call fetchAndPopulateTable function when DOM content is loaded\ndocument.addEventListener('DOMContentLoaded', fetchAndPopulateTable);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}