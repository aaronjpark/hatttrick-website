{"ast":null,"code":"// standings.js\n\n// Function to fetch JSON data from file\nasync function fetchStandings() {\n  try {\n    const response = await fetch('backend/leagues.json');\n    const data = await response.json();\n    return data['Premier League']['standings'];\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    return null;\n  }\n}\n\n// Function to generate HTML table from standings data\nasync function generateTable() {\n  const standings = await fetchStandings();\n  if (!standings) {\n    console.error('No standings data available');\n    return;\n  }\n  const body = document.getElementsByTagName('body')[0];\n\n  // Create h1 element for title\n  const h1 = document.createElement('h1');\n  h1.textContent = 'Premier League Standings';\n  body.appendChild(h1);\n\n  // Create div element for table\n  const tableDiv = document.createElement('div');\n  tableDiv.id = 'standingsTable';\n  body.appendChild(tableDiv);\n\n  // Create table element\n  const table = document.createElement('table');\n  table.classList.add('standings-table');\n\n  // Create table head\n  const thead = document.createElement('thead');\n  const headerRow = thead.insertRow();\n  const headers = ['Position', 'Team', 'Points', 'Games Won', 'Games Lost', 'Goals For', 'Goals Against', 'Goal Difference'];\n  headers.forEach(headerText => {\n    const th = document.createElement('th');\n    th.textContent = headerText;\n    headerRow.appendChild(th);\n  });\n  table.appendChild(thead);\n\n  // Create table body\n  const tbody = document.createElement('tbody');\n  Object.keys(standings).forEach(team => {\n    const row = tbody.insertRow();\n    const data = standings[team];\n    const positionCell = row.insertCell();\n    positionCell.textContent = data.position;\n    const teamCell = row.insertCell();\n    const teamName = document.createElement('img');\n    teamName.src = data.team_crest;\n    teamName.alt = team;\n    teamName.classList.add('team-logo');\n    teamCell.appendChild(teamName);\n    teamCell.innerHTML += ` ${team}`;\n    const pointsCell = row.insertCell();\n    pointsCell.textContent = data.points;\n    const gamesWonCell = row.insertCell();\n    gamesWonCell.textContent = data.games_won;\n    const gamesLostCell = row.insertCell();\n    gamesLostCell.textContent = data.games_lost;\n    const goalsForCell = row.insertCell();\n    goalsForCell.textContent = data.goals_for;\n    const goalsAgainstCell = row.insertCell();\n    goalsAgainstCell.textContent = data.goals_against;\n    const goalDifferenceCell = row.insertCell();\n    goalDifferenceCell.textContent = data.goal_difference;\n  });\n  table.appendChild(tbody);\n  tableDiv.appendChild(table);\n}\n\n// Call generateTable() to generate the table when the script is loaded\ngenerateTable();","map":{"version":3,"names":["fetchStandings","response","fetch","data","json","error","console","generateTable","standings","body","document","getElementsByTagName","h1","createElement","textContent","appendChild","tableDiv","id","table","classList","add","thead","headerRow","insertRow","headers","forEach","headerText","th","tbody","Object","keys","team","row","positionCell","insertCell","position","teamCell","teamName","src","team_crest","alt","innerHTML","pointsCell","points","gamesWonCell","games_won","gamesLostCell","games_lost","goalsForCell","goals_for","goalsAgainstCell","goals_against","goalDifferenceCell","goal_difference"],"sources":["/Users/ang3l/Documents/Software Engineering/cs373-idb/src/pages/league.js"],"sourcesContent":["// standings.js\n\n// Function to fetch JSON data from file\nasync function fetchStandings() {\n    try {\n        const response = await fetch('backend/leagues.json');\n        const data = await response.json();\n        return data['Premier League']['standings'];\n    } catch (error) {\n        console.error('Error fetching data:', error);\n        return null;\n    }\n}\n\n// Function to generate HTML table from standings data\nasync function generateTable() {\n    const standings = await fetchStandings();\n\n    if (!standings) {\n        console.error('No standings data available');\n        return;\n    }\n\n    const body = document.getElementsByTagName('body')[0];\n\n    // Create h1 element for title\n    const h1 = document.createElement('h1');\n    h1.textContent = 'Premier League Standings';\n    body.appendChild(h1);\n\n    // Create div element for table\n    const tableDiv = document.createElement('div');\n    tableDiv.id = 'standingsTable';\n    body.appendChild(tableDiv);\n\n    // Create table element\n    const table = document.createElement('table');\n    table.classList.add('standings-table');\n\n    // Create table head\n    const thead = document.createElement('thead');\n    const headerRow = thead.insertRow();\n\n    const headers = ['Position', 'Team', 'Points', 'Games Won', 'Games Lost', 'Goals For', 'Goals Against', 'Goal Difference'];\n\n    headers.forEach(headerText => {\n        const th = document.createElement('th');\n        th.textContent = headerText;\n        headerRow.appendChild(th);\n    });\n\n    table.appendChild(thead);\n\n    // Create table body\n    const tbody = document.createElement('tbody');\n\n    Object.keys(standings).forEach(team => {\n        const row = tbody.insertRow();\n        const data = standings[team];\n\n        const positionCell = row.insertCell();\n        positionCell.textContent = data.position;\n\n        const teamCell = row.insertCell();\n        const teamName = document.createElement('img');\n        teamName.src = data.team_crest;\n        teamName.alt = team;\n        teamName.classList.add('team-logo');\n        teamCell.appendChild(teamName);\n        teamCell.innerHTML += ` ${team}`;\n\n        const pointsCell = row.insertCell();\n        pointsCell.textContent = data.points;\n\n        const gamesWonCell = row.insertCell();\n        gamesWonCell.textContent = data.games_won;\n\n        const gamesLostCell = row.insertCell();\n        gamesLostCell.textContent = data.games_lost;\n\n        const goalsForCell = row.insertCell();\n        goalsForCell.textContent = data.goals_for;\n\n        const goalsAgainstCell = row.insertCell();\n        goalsAgainstCell.textContent = data.goals_against;\n\n        const goalDifferenceCell = row.insertCell();\n        goalDifferenceCell.textContent = data.goal_difference;\n    });\n\n    table.appendChild(tbody);\n    tableDiv.appendChild(table);\n}\n\n// Call generateTable() to generate the table when the script is loaded\ngenerateTable();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}