{"ast":null,"code":"document.addEventListener('DOMContentLoaded', () => {\n  fetch('leagues.json').then(response => response.json()).then(data => {\n    const standings = data['Premier League'].standings;\n    const tableBody = document.getElementById('tableBody');\n    for (const team in standings) {\n      const row = document.createElement('tr');\n      const positionCell = document.createElement('td');\n      positionCell.textContent = standings[team].position;\n      row.appendChild(positionCell);\n      const teamCell = document.createElement('td');\n      teamCell.textContent = team.replace(/-/g, ' ');\n      row.appendChild(teamCell);\n      const crestCell = document.createElement('td');\n      const img = document.createElement('img');\n      img.src = standings[team].team_crest;\n      img.alt = team;\n      img.style.width = '50px';\n      img.style.height = 'auto';\n      crestCell.appendChild(img);\n      row.appendChild(crestCell);\n      const pointsCell = document.createElement('td');\n      pointsCell.textContent = standings[team].points;\n      row.appendChild(pointsCell);\n      const gamesWonCell = document.createElement('td');\n      gamesWonCell.textContent = standings[team].games_won;\n      row.appendChild(gamesWonCell);\n      const gamesLostCell = document.createElement('td');\n      gamesLostCell.textContent = standings[team].games_lost;\n      row.appendChild(gamesLostCell);\n      const goalsForCell = document.createElement('td');\n      goalsForCell.textContent = standings[team].goals_for;\n      row.appendChild(goalsForCell);\n      const goalsAgainstCell = document.createElement('td');\n      goalsAgainstCell.textContent = standings[team].goals_against;\n      row.appendChild(goalsAgainstCell);\n      const goalDifferenceCell = document.createElement('td');\n      goalDifferenceCell.textContent = standings[team].goal_difference;\n      row.appendChild(goalDifferenceCell);\n      tableBody.appendChild(row);\n    }\n  }).catch(error => console.error('Error fetching data:', error));\n});","map":{"version":3,"names":["document","addEventListener","fetch","then","response","json","data","standings","tableBody","getElementById","team","row","createElement","positionCell","textContent","position","appendChild","teamCell","replace","crestCell","img","src","team_crest","alt","style","width","height","pointsCell","points","gamesWonCell","games_won","gamesLostCell","games_lost","goalsForCell","goals_for","goalsAgainstCell","goals_against","goalDifferenceCell","goal_difference","catch","error","console"],"sources":["/Users/ang3l/Documents/Software Engineering/cs373-idb/src/pages/league.js"],"sourcesContent":["document.addEventListener('DOMContentLoaded', () => {\n    fetch('leagues.json')\n        .then(response => response.json())\n        .then(data => {\n            const standings = data['Premier League'].standings;\n            const tableBody = document.getElementById('tableBody');\n\n            for (const team in standings) {\n                const row = document.createElement('tr');\n                \n                const positionCell = document.createElement('td');\n                positionCell.textContent = standings[team].position;\n                row.appendChild(positionCell);\n\n                const teamCell = document.createElement('td');\n                teamCell.textContent = team.replace(/-/g, ' ');\n                row.appendChild(teamCell);\n\n                const crestCell = document.createElement('td');\n                const img = document.createElement('img');\n                img.src = standings[team].team_crest;\n                img.alt = team;\n                img.style.width = '50px';\n                img.style.height = 'auto';\n                crestCell.appendChild(img);\n                row.appendChild(crestCell);\n\n                const pointsCell = document.createElement('td');\n                pointsCell.textContent = standings[team].points;\n                row.appendChild(pointsCell);\n\n                const gamesWonCell = document.createElement('td');\n                gamesWonCell.textContent = standings[team].games_won;\n                row.appendChild(gamesWonCell);\n\n                const gamesLostCell = document.createElement('td');\n                gamesLostCell.textContent = standings[team].games_lost;\n                row.appendChild(gamesLostCell);\n\n                const goalsForCell = document.createElement('td');\n                goalsForCell.textContent = standings[team].goals_for;\n                row.appendChild(goalsForCell);\n\n                const goalsAgainstCell = document.createElement('td');\n                goalsAgainstCell.textContent = standings[team].goals_against;\n                row.appendChild(goalsAgainstCell);\n\n                const goalDifferenceCell = document.createElement('td');\n                goalDifferenceCell.textContent = standings[team].goal_difference;\n                row.appendChild(goalDifferenceCell);\n\n                tableBody.appendChild(row);\n            }\n        })\n        .catch(error => console.error('Error fetching data:', error));\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}